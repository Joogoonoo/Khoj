const PROXY_URL = "https://hooks.jdoodle.net/proxy";
const API_BASE_URL = "http://localhost:5000/api";
const getMockStats = () => {
  return {
    totalUrls: 15487,
    crawledUrls: 12356,
    pendingUrls: 2845,
    failedUrls: 286,
    lastCrawlTime: /* @__PURE__ */ new Date(),
    averageCrawlTimeMs: 457
  };
};
const getMockCrawlResult = (url) => {
  return {
    url,
    title: `${url} - Sample Page`,
    description: "This is a sample description extracted from the page.",
    keywords: ["sample", "test", "crawler"],
    lastCrawled: /* @__PURE__ */ new Date(),
    status: Math.random() > 0.2 ? "success" : "error"
  };
};
const getMockRecentCrawls = (limit) => {
  const domains = [
    "example.com",
    "test.org",
    "sample-site.net",
    "demo.co.in",
    "testdata.com"
  ];
  return Array.from({ length: limit }, (_, i) => ({
    url: `https://www.${domains[i % domains.length]}/page-${i + 1}`,
    title: `Sample Page ${i + 1}`,
    description: `This is a description for sample page ${i + 1}. It would contain text extracted from the webpage.`,
    keywords: ["sample", "test", `keyword-${i}`],
    lastCrawled: new Date(Date.now() - Math.random() * 864e5),
    status: Math.random() > 0.15 ? "success" : "error"
  }));
};
const getMockVisualizationData = () => {
  const timeseriesData = Array.from({ length: 30 }, (_, i) => {
    const date = /* @__PURE__ */ new Date();
    date.setDate(date.getDate() - (29 - i));
    return {
      date: date.toISOString().split("T")[0],
      crawledPages: Math.floor(300 + Math.random() * 200),
      indexedPages: Math.floor(250 + Math.random() * 180),
      errors: Math.floor(Math.random() * 30)
    };
  });
  const contentTypeData = [
    { name: "HTML", value: 65 },
    { name: "PDF", value: 15 },
    { name: "Images", value: 12 },
    { name: "Video", value: 5 },
    { name: "Other", value: 3 }
  ];
  const domainDistribution = [
    { name: "example.com", value: 1245 },
    { name: "test.org", value: 834 },
    { name: "sample-site.net", value: 762 },
    { name: "demo.co.in", value: 621 },
    { name: "other domains", value: 2134 }
  ];
  return {
    timeseriesData,
    contentTypeData,
    domainDistribution
  };
};
export const crawlerApi = {
  getStats: async () => {
    try {
      return getMockStats();
    } catch (error) {
      console.error("Crawler stats API error:", error);
      throw error;
    }
  },
  crawlUrl: async (url) => {
    try {
      return {
        url,
        message: "URL added to crawl queue"
      };
    } catch (error) {
      console.error("Crawl URL API error:", error);
      throw error;
    }
  },
  getRecentCrawls: async (limit = 10) => {
    try {
      return getMockRecentCrawls(limit);
    } catch (error) {
      console.error("Recent crawls API error:", error);
      return [];
    }
  },
  getVisualizationData: async () => {
    try {
      return getMockVisualizationData();
    } catch (error) {
      console.error("Visualization data API error:", error);
      throw error;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyYXdsZXJBcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IFBST1hZX1VSTCA9ICdodHRwczovL2hvb2tzLmpkb29kbGUubmV0L3Byb3h5JztcbmNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXBpJztcblxuZXhwb3J0IGludGVyZmFjZSBDcmF3bFN0YXRzIHtcbiAgdG90YWxVcmxzOiBudW1iZXI7XG4gIGNyYXdsZWRVcmxzOiBudW1iZXI7XG4gIHBlbmRpbmdVcmxzOiBudW1iZXI7XG4gIGZhaWxlZFVybHM6IG51bWJlcjtcbiAgbGFzdENyYXdsVGltZTogRGF0ZTtcbiAgYXZlcmFnZUNyYXdsVGltZU1zOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3Jhd2xSZXN1bHQge1xuICB1cmw6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAga2V5d29yZHM6IHN0cmluZ1tdO1xuICBsYXN0Q3Jhd2xlZDogRGF0ZTtcbiAgc3RhdHVzOiAnc3VjY2VzcycgfCAnZXJyb3InIHwgJ3BlbmRpbmcnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyYXdsVmlzdWFsaXphdGlvbkRhdGEge1xuICB0aW1lc2VyaWVzRGF0YTogYW55W107XG4gIGNvbnRlbnRUeXBlRGF0YTogYW55W107XG4gIGRvbWFpbkRpc3RyaWJ1dGlvbjogYW55W107XG59XG5cbi8vIE1vY2sgZGF0YSBnZW5lcmF0b3JzXG5jb25zdCBnZXRNb2NrU3RhdHMgPSAoKTogQ3Jhd2xTdGF0cyA9PiB7XG4gIHJldHVybiB7XG4gICAgdG90YWxVcmxzOiAxNTQ4NyxcbiAgICBjcmF3bGVkVXJsczogMTIzNTYsXG4gICAgcGVuZGluZ1VybHM6IDI4NDUsXG4gICAgZmFpbGVkVXJsczogMjg2LFxuICAgIGxhc3RDcmF3bFRpbWU6IG5ldyBEYXRlKCksXG4gICAgYXZlcmFnZUNyYXdsVGltZU1zOiA0NTdcbiAgfTtcbn07XG5cbmNvbnN0IGdldE1vY2tDcmF3bFJlc3VsdCA9ICh1cmw6IHN0cmluZyk6IENyYXdsUmVzdWx0ID0+IHtcbiAgcmV0dXJuIHtcbiAgICB1cmwsXG4gICAgdGl0bGU6IGAke3VybH0gLSBTYW1wbGUgUGFnZWAsXG4gICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGEgc2FtcGxlIGRlc2NyaXB0aW9uIGV4dHJhY3RlZCBmcm9tIHRoZSBwYWdlLicsXG4gICAga2V5d29yZHM6IFsnc2FtcGxlJywgJ3Rlc3QnLCAnY3Jhd2xlciddLFxuICAgIGxhc3RDcmF3bGVkOiBuZXcgRGF0ZSgpLFxuICAgIHN0YXR1czogTWF0aC5yYW5kb20oKSA+IDAuMiA/ICdzdWNjZXNzJyA6ICdlcnJvcidcbiAgfTtcbn07XG5cbmNvbnN0IGdldE1vY2tSZWNlbnRDcmF3bHMgPSAobGltaXQ6IG51bWJlcik6IENyYXdsUmVzdWx0W10gPT4ge1xuICBjb25zdCBkb21haW5zID0gW1xuICAgICdleGFtcGxlLmNvbScsXG4gICAgJ3Rlc3Qub3JnJyxcbiAgICAnc2FtcGxlLXNpdGUubmV0JyxcbiAgICAnZGVtby5jby5pbicsXG4gICAgJ3Rlc3RkYXRhLmNvbSdcbiAgXTtcbiAgXG4gIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBsaW1pdCB9LCAoXywgaSkgPT4gKHtcbiAgICB1cmw6IGBodHRwczovL3d3dy4ke2RvbWFpbnNbaSAlIGRvbWFpbnMubGVuZ3RoXX0vcGFnZS0ke2kgKyAxfWAsXG4gICAgdGl0bGU6IGBTYW1wbGUgUGFnZSAke2kgKyAxfWAsXG4gICAgZGVzY3JpcHRpb246IGBUaGlzIGlzIGEgZGVzY3JpcHRpb24gZm9yIHNhbXBsZSBwYWdlICR7aSArIDF9LiBJdCB3b3VsZCBjb250YWluIHRleHQgZXh0cmFjdGVkIGZyb20gdGhlIHdlYnBhZ2UuYCxcbiAgICBrZXl3b3JkczogWydzYW1wbGUnLCAndGVzdCcsIGBrZXl3b3JkLSR7aX1gXSxcbiAgICBsYXN0Q3Jhd2xlZDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIE1hdGgucmFuZG9tKCkgKiA4NjQwMDAwMCksXG4gICAgc3RhdHVzOiBNYXRoLnJhbmRvbSgpID4gMC4xNSA/ICdzdWNjZXNzJyA6ICdlcnJvcidcbiAgfSkpO1xufTtcblxuY29uc3QgZ2V0TW9ja1Zpc3VhbGl6YXRpb25EYXRhID0gKCk6IENyYXdsVmlzdWFsaXphdGlvbkRhdGEgPT4ge1xuICBjb25zdCB0aW1lc2VyaWVzRGF0YSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDMwIH0sIChfLCBpKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKDI5IC0gaSkpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBkYXRlOiBkYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSxcbiAgICAgIGNyYXdsZWRQYWdlczogTWF0aC5mbG9vcigzMDAgKyBNYXRoLnJhbmRvbSgpICogMjAwKSxcbiAgICAgIGluZGV4ZWRQYWdlczogTWF0aC5mbG9vcigyNTAgKyBNYXRoLnJhbmRvbSgpICogMTgwKSxcbiAgICAgIGVycm9yczogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzApXG4gICAgfTtcbiAgfSk7XG4gIFxuICBjb25zdCBjb250ZW50VHlwZURhdGEgPSBbXG4gICAgeyBuYW1lOiAnSFRNTCcsIHZhbHVlOiA2NSB9LFxuICAgIHsgbmFtZTogJ1BERicsIHZhbHVlOiAxNSB9LFxuICAgIHsgbmFtZTogJ0ltYWdlcycsIHZhbHVlOiAxMiB9LFxuICAgIHsgbmFtZTogJ1ZpZGVvJywgdmFsdWU6IDUgfSxcbiAgICB7IG5hbWU6ICdPdGhlcicsIHZhbHVlOiAzIH1cbiAgXTtcbiAgXG4gIGNvbnN0IGRvbWFpbkRpc3RyaWJ1dGlvbiA9IFtcbiAgICB7IG5hbWU6ICdleGFtcGxlLmNvbScsIHZhbHVlOiAxMjQ1IH0sXG4gICAgeyBuYW1lOiAndGVzdC5vcmcnLCB2YWx1ZTogODM0IH0sXG4gICAgeyBuYW1lOiAnc2FtcGxlLXNpdGUubmV0JywgdmFsdWU6IDc2MiB9LFxuICAgIHsgbmFtZTogJ2RlbW8uY28uaW4nLCB2YWx1ZTogNjIxIH0sXG4gICAgeyBuYW1lOiAnb3RoZXIgZG9tYWlucycsIHZhbHVlOiAyMTM0IH1cbiAgXTtcbiAgXG4gIHJldHVybiB7XG4gICAgdGltZXNlcmllc0RhdGEsXG4gICAgY29udGVudFR5cGVEYXRhLFxuICAgIGRvbWFpbkRpc3RyaWJ1dGlvblxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyYXdsZXJBcGkgPSB7XG4gIGdldFN0YXRzOiBhc3luYyAoKTogUHJvbWlzZTxDcmF3bFN0YXRzPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBtb2NrIGRhdGEgdG8gYXZvaWQgQVBJIGNhbGwgaXNzdWVzXG4gICAgICByZXR1cm4gZ2V0TW9ja1N0YXRzKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NyYXdsZXIgc3RhdHMgQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIGNyYXdsVXJsOiBhc3luYyAodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBNb2NrIHN1Y2Nlc3NmdWwgY3Jhd2xcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVybCxcbiAgICAgICAgbWVzc2FnZTogJ1VSTCBhZGRlZCB0byBjcmF3bCBxdWV1ZSdcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NyYXdsIFVSTCBBUEkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgZ2V0UmVjZW50Q3Jhd2xzOiBhc3luYyAobGltaXQ6IG51bWJlciA9IDEwKTogUHJvbWlzZTxDcmF3bFJlc3VsdFtdPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFJldHVybiBtb2NrIGRhdGFcbiAgICAgIHJldHVybiBnZXRNb2NrUmVjZW50Q3Jhd2xzKGxpbWl0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignUmVjZW50IGNyYXdscyBBUEkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcbiAgXG4gIGdldFZpc3VhbGl6YXRpb25EYXRhOiBhc3luYyAoKTogUHJvbWlzZTxDcmF3bFZpc3VhbGl6YXRpb25EYXRhPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFJldHVybiBtb2NrIHZpc3VhbGl6YXRpb24gZGF0YVxuICAgICAgcmV0dXJuIGdldE1vY2tWaXN1YWxpemF0aW9uRGF0YSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdWaXN1YWxpemF0aW9uIGRhdGEgQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcbiBcbiJdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sZUFBZTtBQTJCckIsTUFBTSxlQUFlLE1BQWtCO0FBQ3JDLFNBQU87QUFBQSxJQUNMLFdBQVc7QUFBQSxJQUNYLGFBQWE7QUFBQSxJQUNiLGFBQWE7QUFBQSxJQUNiLFlBQVk7QUFBQSxJQUNaLGVBQWUsb0JBQUksS0FBSztBQUFBLElBQ3hCLG9CQUFvQjtBQUFBLEVBQ3RCO0FBQ0Y7QUFFQSxNQUFNLHFCQUFxQixDQUFDLFFBQTZCO0FBQ3ZELFNBQU87QUFBQSxJQUNMO0FBQUEsSUFDQSxPQUFPLEdBQUcsR0FBRztBQUFBLElBQ2IsYUFBYTtBQUFBLElBQ2IsVUFBVSxDQUFDLFVBQVUsUUFBUSxTQUFTO0FBQUEsSUFDdEMsYUFBYSxvQkFBSSxLQUFLO0FBQUEsSUFDdEIsUUFBUSxLQUFLLE9BQU8sSUFBSSxNQUFNLFlBQVk7QUFBQSxFQUM1QztBQUNG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
