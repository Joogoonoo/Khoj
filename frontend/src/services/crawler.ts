export const crawlUrl = async (url) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        url,
        title: `${url} - Sample Page`,
        description: "This is a sample description extracted from the page.",
        keywords: ["sample", "test", "crawler"],
        lastCrawled: /* @__PURE__ */ new Date(),
        status: Math.random() > 0.2 ? "success" : "error"
      });
    }, 1500);
  });
};
export const getCrawlStats = async () => {
  return {
    totalUrls: 15487,
    crawledUrls: 12356,
    pendingUrls: 2845,
    failedUrls: 286,
    lastCrawlTime: /* @__PURE__ */ new Date(),
    averageCrawlTimeMs: 457
  };
};
export const getRecentCrawls = async (limit = 10) => {
  const domains = [
    "example.com",
    "test.org",
    "sample-site.net",
    "demo.co.in",
    "testdata.com"
  ];
  return Array.from({ length: limit }, (_, i) => ({
    url: `https://www.${domains[i % domains.length]}/page-${i + 1}`,
    title: `Sample Page ${i + 1}`,
    description: `This is a description for sample page ${i + 1}. It would contain text extracted from the webpage.`,
    keywords: ["sample", "test", `keyword-${i}`],
    lastCrawled: new Date(Date.now() - Math.random() * 864e5),
    status: Math.random() > 0.15 ? "success" : "error"
  }));
};
export const getCrawlDataForVisualization = async () => {
  const timeseriesData = Array.from({ length: 30 }, (_, i) => {
    const date = /* @__PURE__ */ new Date();
    date.setDate(date.getDate() - (29 - i));
    return {
      date: date.toISOString().split("T")[0],
      crawledPages: Math.floor(300 + Math.random() * 200),
      indexedPages: Math.floor(250 + Math.random() * 180),
      errors: Math.floor(Math.random() * 30)
    };
  });
  const contentTypeData = [
    { name: "HTML", value: 65 },
    { name: "PDF", value: 15 },
    { name: "Images", value: 12 },
    { name: "Video", value: 5 },
    { name: "Other", value: 3 }
  ];
  const domainDistribution = [
    { name: "example.com", value: 1245 },
    { name: "test.org", value: 834 },
    { name: "sample-site.net", value: 762 },
    { name: "demo.co.in", value: 621 },
    { name: "other domains", value: 2134 }
  ];
  return {
    timeseriesData,
    contentTypeData,
    domainDistribution
  };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyYXdsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNhbXBsZSB3ZWIgY3Jhd2xlciBzZXJ2aWNlXG5leHBvcnQgaW50ZXJmYWNlIENyYXdsUmVzdWx0IHtcbiAgdXJsOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGtleXdvcmRzOiBzdHJpbmdbXTtcbiAgbGFzdENyYXdsZWQ6IERhdGU7XG4gIHN0YXR1czogJ3N1Y2Nlc3MnIHwgJ2Vycm9yJyB8ICdwZW5kaW5nJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmF3bFN0YXRzIHtcbiAgdG90YWxVcmxzOiBudW1iZXI7XG4gIGNyYXdsZWRVcmxzOiBudW1iZXI7XG4gIHBlbmRpbmdVcmxzOiBudW1iZXI7XG4gIGZhaWxlZFVybHM6IG51bWJlcjtcbiAgbGFzdENyYXdsVGltZTogRGF0ZTtcbiAgYXZlcmFnZUNyYXdsVGltZU1zOiBudW1iZXI7XG59XG5cbi8vIE1vY2sgQVBJIGZvciBjcmF3bGluZyBhIFVSTFxuZXhwb3J0IGNvbnN0IGNyYXdsVXJsID0gYXN5bmMgKHVybDogc3RyaW5nKTogUHJvbWlzZTxDcmF3bFJlc3VsdD4gPT4ge1xuICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgbWFrZSBhIHJlcXVlc3QgdG8gdGhlIGNyYXdsZXIgYmFja2VuZFxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICB1cmwsXG4gICAgICAgIHRpdGxlOiBgJHt1cmx9IC0gU2FtcGxlIFBhZ2VgLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYSBzYW1wbGUgZGVzY3JpcHRpb24gZXh0cmFjdGVkIGZyb20gdGhlIHBhZ2UuJyxcbiAgICAgICAga2V5d29yZHM6IFsnc2FtcGxlJywgJ3Rlc3QnLCAnY3Jhd2xlciddLFxuICAgICAgICBsYXN0Q3Jhd2xlZDogbmV3IERhdGUoKSxcbiAgICAgICAgc3RhdHVzOiBNYXRoLnJhbmRvbSgpID4gMC4yID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJ1xuICAgICAgfSk7XG4gICAgfSwgMTUwMCk7XG4gIH0pO1xufTtcblxuLy8gTW9jayBBUEkgZm9yIGZldGNoaW5nIGNyYXdsIHN0YXRpc3RpY3NcbmV4cG9ydCBjb25zdCBnZXRDcmF3bFN0YXRzID0gYXN5bmMgKCk6IFByb21pc2U8Q3Jhd2xTdGF0cz4gPT4ge1xuICByZXR1cm4ge1xuICAgIHRvdGFsVXJsczogMTU0ODcsXG4gICAgY3Jhd2xlZFVybHM6IDEyMzU2LFxuICAgIHBlbmRpbmdVcmxzOiAyODQ1LFxuICAgIGZhaWxlZFVybHM6IDI4NixcbiAgICBsYXN0Q3Jhd2xUaW1lOiBuZXcgRGF0ZSgpLFxuICAgIGF2ZXJhZ2VDcmF3bFRpbWVNczogNDU3XG4gIH07XG59O1xuXG4vLyBNb2NrIEFQSSBmb3IgZmV0Y2hpbmcgcmVjZW50IGNyYXdsIHJlc3VsdHNcbmV4cG9ydCBjb25zdCBnZXRSZWNlbnRDcmF3bHMgPSBhc3luYyAobGltaXQ6IG51bWJlciA9IDEwKTogUHJvbWlzZTxDcmF3bFJlc3VsdFtdPiA9PiB7XG4gIGNvbnN0IGRvbWFpbnMgPSBbXG4gICAgJ2V4YW1wbGUuY29tJyxcbiAgICAndGVzdC5vcmcnLFxuICAgICdzYW1wbGUtc2l0ZS5uZXQnLFxuICAgICdkZW1vLmNvLmluJyxcbiAgICAndGVzdGRhdGEuY29tJ1xuICBdO1xuICBcbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGxpbWl0IH0sIChfLCBpKSA9PiAoe1xuICAgIHVybDogYGh0dHBzOi8vd3d3LiR7ZG9tYWluc1tpICUgZG9tYWlucy5sZW5ndGhdfS9wYWdlLSR7aSArIDF9YCxcbiAgICB0aXRsZTogYFNhbXBsZSBQYWdlICR7aSArIDF9YCxcbiAgICBkZXNjcmlwdGlvbjogYFRoaXMgaXMgYSBkZXNjcmlwdGlvbiBmb3Igc2FtcGxlIHBhZ2UgJHtpICsgMX0uIEl0IHdvdWxkIGNvbnRhaW4gdGV4dCBleHRyYWN0ZWQgZnJvbSB0aGUgd2VicGFnZS5gLFxuICAgIGtleXdvcmRzOiBbJ3NhbXBsZScsICd0ZXN0JywgYGtleXdvcmQtJHtpfWBdLFxuICAgIGxhc3RDcmF3bGVkOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gTWF0aC5yYW5kb20oKSAqIDg2NDAwMDAwKSxcbiAgICBzdGF0dXM6IE1hdGgucmFuZG9tKCkgPiAwLjE1ID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJ1xuICB9KSk7XG59O1xuXG4vLyBNb2NrIEFQSSBmb3IgZ2V0dGluZyBjcmF3bCBkYXRhIGZvciB2aXN1YWxpemF0aW9uXG5leHBvcnQgY29uc3QgZ2V0Q3Jhd2xEYXRhRm9yVmlzdWFsaXphdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgLy8gU2ltdWxhdGVkIGRhdGEgZm9yIHZpc3VhbGl6YXRpb25zXG4gIGNvbnN0IHRpbWVzZXJpZXNEYXRhID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMzAgfSwgKF8sIGkpID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoMjkgLSBpKSk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGU6IGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxuICAgICAgY3Jhd2xlZFBhZ2VzOiBNYXRoLmZsb29yKDMwMCArIE1hdGgucmFuZG9tKCkgKiAyMDApLFxuICAgICAgaW5kZXhlZFBhZ2VzOiBNYXRoLmZsb29yKDI1MCArIE1hdGgucmFuZG9tKCkgKiAxODApLFxuICAgICAgZXJyb3JzOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMClcbiAgICB9O1xuICB9KTtcbiAgXG4gIGNvbnN0IGNvbnRlbnRUeXBlRGF0YSA9IFtcbiAgICB7IG5hbWU6ICdIVE1MJywgdmFsdWU6IDY1IH0sXG4gICAgeyBuYW1lOiAnUERGJywgdmFsdWU6IDE1IH0sXG4gICAgeyBuYW1lOiAnSW1hZ2VzJywgdmFsdWU6IDEyIH0sXG4gICAgeyBuYW1lOiAnVmlkZW8nLCB2YWx1ZTogNSB9LFxuICAgIHsgbmFtZTogJ090aGVyJywgdmFsdWU6IDMgfVxuICBdO1xuICBcbiAgY29uc3QgZG9tYWluRGlzdHJpYnV0aW9uID0gW1xuICAgIHsgbmFtZTogJ2V4YW1wbGUuY29tJywgdmFsdWU6IDEyNDUgfSxcbiAgICB7IG5hbWU6ICd0ZXN0Lm9yZycsIHZhbHVlOiA4MzQgfSxcbiAgICB7IG5hbWU6ICdzYW1wbGUtc2l0ZS5uZXQnLCB2YWx1ZTogNzYyIH0sXG4gICAgeyBuYW1lOiAnZGVtby5jby5pbicsIHZhbHVlOiA2MjEgfSxcbiAgICB7IG5hbWU6ICdvdGhlciBkb21haW5zJywgdmFsdWU6IDIxMzQgfVxuICBdO1xuICBcbiAgcmV0dXJuIHtcbiAgICB0aW1lc2VyaWVzRGF0YSxcbiAgICBjb250ZW50VHlwZURhdGEsXG4gICAgZG9tYWluRGlzdHJpYnV0aW9uXG4gIH07XG59O1xuIFxuIl0sIm1hcHBpbmdzIjoiQUFvQk8sYUFBTSxXQUFXLE9BQU8sUUFBc0M7QUFFbkUsU0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzlCLGVBQVcsTUFBTTtBQUNmLGNBQVE7QUFBQSxRQUNOO0FBQUEsUUFDQSxPQUFPLEdBQUcsR0FBRztBQUFBLFFBQ2IsYUFBYTtBQUFBLFFBQ2IsVUFBVSxDQUFDLFVBQVUsUUFBUSxTQUFTO0FBQUEsUUFDdEMsYUFBYSxvQkFBSSxLQUFLO0FBQUEsUUFDdEIsUUFBUSxLQUFLLE9BQU8sSUFBSSxNQUFNLFlBQVk7QUFBQSxNQUM1QyxDQUFDO0FBQUEsSUFDSCxHQUFHLElBQUk7QUFBQSxFQUNULENBQUM7QUFDSDtBQUdPLGFBQU0sZ0JBQWdCLFlBQWlDO0FBQzVELFNBQU87QUFBQSxJQUNMLFdBQVc7QUFBQSxJQUNYLGFBQWE7QUFBQSxJQUNiLGFBQWE7QUFBQSxJQUNiLFlBQVk7QUFBQSxJQUNaLGVBQWUsb0JBQUksS0FBSztBQUFBLElBQ3hCLG9CQUFvQjtBQUFBLEVBQ3RCO0FBQ0Y7QUFHTyxhQUFNLGtCQUFrQixPQUFPLFFBQWdCLE9BQStCO0FBQ25GLFFBQU0sVUFBVTtBQUFBLElBQ2Q7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRjtBQUVBLFNBQU8sTUFBTSxLQUFLLEVBQUUsUUFBUSxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU87QUFBQSxJQUM5QyxLQUFLLGVBQWUsUUFBUSxJQUFJLFFBQVEsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDO0FBQUEsSUFDN0QsT0FBTyxlQUFlLElBQUksQ0FBQztBQUFBLElBQzNCLGFBQWEseUNBQXlDLElBQUksQ0FBQztBQUFBLElBQzNELFVBQVUsQ0FBQyxVQUFVLFFBQVEsV0FBVyxDQUFDLEVBQUU7QUFBQSxJQUMzQyxhQUFhLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxLQUFRO0FBQUEsSUFDM0QsUUFBUSxLQUFLLE9BQU8sSUFBSSxPQUFPLFlBQVk7QUFBQSxFQUM3QyxFQUFFO0FBQ0o7QUFHTyxhQUFNLCtCQUErQixZQUFZO0FBRXRELFFBQU0saUJBQWlCLE1BQU0sS0FBSyxFQUFFLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxNQUFNO0FBQzFELFVBQU0sT0FBTyxvQkFBSSxLQUFLO0FBQ3RCLFNBQUssUUFBUSxLQUFLLFFBQVEsS0FBSyxLQUFLLEVBQUU7QUFFdEMsV0FBTztBQUFBLE1BQ0wsTUFBTSxLQUFLLFlBQVksRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQUEsTUFDckMsY0FBYyxLQUFLLE1BQU0sTUFBTSxLQUFLLE9BQU8sSUFBSSxHQUFHO0FBQUEsTUFDbEQsY0FBYyxLQUFLLE1BQU0sTUFBTSxLQUFLLE9BQU8sSUFBSSxHQUFHO0FBQUEsTUFDbEQsUUFBUSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksRUFBRTtBQUFBLElBQ3ZDO0FBQUEsRUFDRixDQUFDO0FBRUQsUUFBTSxrQkFBa0I7QUFBQSxJQUN0QixFQUFFLE1BQU0sUUFBUSxPQUFPLEdBQUc7QUFBQSxJQUMxQixFQUFFLE1BQU0sT0FBTyxPQUFPLEdBQUc7QUFBQSxJQUN6QixFQUFFLE1BQU0sVUFBVSxPQUFPLEdBQUc7QUFBQSxJQUM1QixFQUFFLE1BQU0sU0FBUyxPQUFPLEVBQUU7QUFBQSxJQUMxQixFQUFFLE1BQU0sU0FBUyxPQUFPLEVBQUU7QUFBQSxFQUM1QjtBQUVBLFFBQU0scUJBQXFCO0FBQUEsSUFDekIsRUFBRSxNQUFNLGVBQWUsT0FBTyxLQUFLO0FBQUEsSUFDbkMsRUFBRSxNQUFNLFlBQVksT0FBTyxJQUFJO0FBQUEsSUFDL0IsRUFBRSxNQUFNLG1CQUFtQixPQUFPLElBQUk7QUFBQSxJQUN0QyxFQUFFLE1BQU0sY0FBYyxPQUFPLElBQUk7QUFBQSxJQUNqQyxFQUFFLE1BQU0saUJBQWlCLE9BQU8sS0FBSztBQUFBLEVBQ3ZDO0FBRUEsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0Y7QUFDRjsiLCJuYW1lcyI6W119
